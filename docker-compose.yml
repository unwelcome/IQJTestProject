services:

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      IS_DOCKER: true
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: postgres:17-alpine
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - ./.env
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/database/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - app-network

  redis:
    container_name: redis
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    env_file:
      - ./.env
    volumes:
      - redis_data:/data
    command:
      - redis-server
      - --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  minio:
    container_name: minio
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: "${MINIO_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_PASSWORD}"
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  redis_data:
  minio_data: